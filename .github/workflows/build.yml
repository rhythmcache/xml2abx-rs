name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - arch: x86_64
            target: x86_64-pc-windows-msvc
          - arch: i686
            target: i686-pc-windows-msvc
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Build
        run: cargo build --release --target ${{ matrix.target }}
        env:
          RUSTFLAGS: -C target-feature=+crt-static -C link-arg=/LTCG
      
      - name: Package
        shell: bash
        run: |
          mkdir package
          cp target/${{ matrix.target }}/release/xml2abx.exe package/
          cd package
          7z a ../xml2abx-windows-${{ matrix.arch }}.zip *
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: xml2abx-windows-${{ matrix.arch }}
          path: xml2abx-windows-${{ matrix.arch }}.zip

  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - arch: x86_64
            target: x86_64-unknown-linux-gnu
            gcc_prefix: x86_64-linux-gnu
            packages: ""
          - arch: i686
            target: i686-unknown-linux-gnu
            gcc_prefix: ""
            packages: gcc-multilib g++-multilib
          - arch: aarch64
            target: aarch64-unknown-linux-gnu
            gcc_prefix: aarch64-linux-gnu
            packages: gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          - arch: armv7
            target: armv7-unknown-linux-gnueabihf
            gcc_prefix: arm-linux-gnueabihf
            packages: gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install cross-compilation toolchain
        if: matrix.packages != ''
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{ matrix.packages }}
      
      - name: Setup cargo config
        if: matrix.arch != 'x86_64'
        run: |
          mkdir -p .cargo
          if [ "${{ matrix.arch }}" = "i686" ]; then
            cat > .cargo/config.toml << 'EOF'
          [target.i686-unknown-linux-gnu]
          linker = "gcc"
          rustflags = ["-C", "link-arg=-m32"]
          EOF
          else
            cat > .cargo/config.toml << EOF
          [target.${{ matrix.target }}]
          linker = "${{ matrix.gcc_prefix }}-gcc"
          EOF
          fi
      
      - name: Build
        run: cargo build --release --target ${{ matrix.target }}
        env:
          RUSTFLAGS: -C target-feature=+crt-static -C link-arg=-static -C link-arg=-no-pie
      
      - name: Strip binary
        run: |
          if [ "${{ matrix.arch }}" = "x86_64" ] || [ "${{ matrix.arch }}" = "i686" ]; then
            strip target/${{ matrix.target }}/release/xml2abx
          else
            ${{ matrix.gcc_prefix }}-strip target/${{ matrix.target }}/release/xml2abx
          fi
      
      - name: Package
        run: |
          mkdir package
          cp target/${{ matrix.target }}/release/xml2abx package/
          cd package
          tar -czf ../xml2abx-linux-${{ matrix.arch }}.tar.gz *
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: xml2abx-linux-${{ matrix.arch }}
          path: xml2abx-linux-${{ matrix.arch }}.tar.gz

  build-android:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - arch: aarch64
            target: aarch64-linux-android
          - arch: armv7a
            target: armv7-linux-androideabi
          - arch: x86_64
            target: x86_64-linux-android
          - arch: i686
            target: i686-linux-android
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r27
          add-to-path: true
      
      - name: Setup cargo config
        run: |
          mkdir -p .cargo
          cat > .cargo/config.toml << EOF
          [target.aarch64-linux-android]
          linker = "${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android30-clang"
          
          [target.armv7-linux-androideabi]
          linker = "${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi30-clang"
          
          [target.x86_64-linux-android]
          linker = "${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android30-clang"
          
          [target.i686-linux-android]
          linker = "${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android30-clang"
          EOF
      
      - name: Build
        run: cargo build --release --target ${{ matrix.target }}
        env:
          RUSTFLAGS: -C link-arg=-static
      
      - name: Strip binary
        run: |
          ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip target/${{ matrix.target }}/release/xml2abx
      
      - name: Package
        run: |
          mkdir package
          cp target/${{ matrix.target }}/release/xml2abx package/
          cd package
          tar -czf ../xml2abx-android-${{ matrix.arch }}.tar.gz *
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: xml2abx-android-${{ matrix.arch }}
          path: xml2abx-android-${{ matrix.arch }}.tar.gz

  release:
    needs: [build-windows, build-linux, build-android]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: build-${{ github.run_number }}
          name: "Build ${{ github.run_number }}"
          body: |
            
            Automated build from workflow run #${{ github.run_number }}
            
          files: |
            artifacts/**/*.zip
            artifacts/**/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
